//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input Actions/Ship Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Ship
{
    public partial class @ShipInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ShipInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Ship Input Actions"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""7a1054df-bfd2-47a3-81ab-e79788d203d2"",
            ""actions"": [
                {
                    ""name"": ""Strafe Axis"",
                    ""type"": ""Value"",
                    ""id"": ""0d1ab0aa-a24d-4be6-b6cf-4595d4aa808a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation Axis"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e2553ce-3c41-4f3f-949e-f3fcdf304bf6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""41f8ab15-21c8-466b-82bb-167a2a8a1ab1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe Axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d8b1dd18-e6cd-4e1a-80e6-4449470c2714"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2033deec-8e9e-44f7-929a-eaafa19391a2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""28548f74-c1a7-4c18-9cb8-c42615cfc5a5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""9ec51ed0-5160-4f0d-a0d0-2da558f57f2a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""ff79ac10-fbac-4c47-b722-4f96809dff9b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Ship
            m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
            m_Ship_StrafeAxis = m_Ship.FindAction("Strafe Axis", throwIfNotFound: true);
            m_Ship_RotationAxis = m_Ship.FindAction("Rotation Axis", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Ship
        private readonly InputActionMap m_Ship;
        private IShipActions m_ShipActionsCallbackInterface;
        private readonly InputAction m_Ship_StrafeAxis;
        private readonly InputAction m_Ship_RotationAxis;
        public struct ShipActions
        {
            private @ShipInputActions m_Wrapper;
            public ShipActions(@ShipInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @StrafeAxis => m_Wrapper.m_Ship_StrafeAxis;
            public InputAction @RotationAxis => m_Wrapper.m_Ship_RotationAxis;
            public InputActionMap Get() { return m_Wrapper.m_Ship; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
            public void SetCallbacks(IShipActions instance)
            {
                if (m_Wrapper.m_ShipActionsCallbackInterface != null)
                {
                    @StrafeAxis.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnStrafeAxis;
                    @StrafeAxis.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnStrafeAxis;
                    @StrafeAxis.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnStrafeAxis;
                    @RotationAxis.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotationAxis;
                    @RotationAxis.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotationAxis;
                    @RotationAxis.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotationAxis;
                }
                m_Wrapper.m_ShipActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @StrafeAxis.started += instance.OnStrafeAxis;
                    @StrafeAxis.performed += instance.OnStrafeAxis;
                    @StrafeAxis.canceled += instance.OnStrafeAxis;
                    @RotationAxis.started += instance.OnRotationAxis;
                    @RotationAxis.performed += instance.OnRotationAxis;
                    @RotationAxis.canceled += instance.OnRotationAxis;
                }
            }
        }
        public ShipActions @Ship => new ShipActions(this);
        public interface IShipActions
        {
            void OnStrafeAxis(InputAction.CallbackContext context);
            void OnRotationAxis(InputAction.CallbackContext context);
        }
    }
}
